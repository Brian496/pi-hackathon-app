#!/usr/bin/env python3
"""
Solana IOC Monitor
Polls Solana JSON-RPC for activity involving watchlisted addresses and emits alerts.

Usage:
  python3 solana_monitor.py --iocs iocs/coindcx_2025-08_watchlist.json --rpc https://api.mainnet-beta.solana.com
Env:
  SOLANA_RPC_URL (fallback if --rpc is not provided)
"""

import os
import time
import json
import logging
import argparse
from typing import Dict, List, Any
import requests

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('solana_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def rpc_call(rpc_url: str, method: str, params: List[Any]) -> Any:
    headers = {"Content-Type": "application/json"}
    body = {"jsonrpc": "2.0", "id": 1, "method": method, "params": params}
    resp = requests.post(rpc_url, headers=headers, data=json.dumps(body), timeout=15)
    resp.raise_for_status()
    data = resp.json()
    if 'error' in data:
        raise RuntimeError(f"RPC error: {data['error']}")
    return data.get('result')


def load_iocs(path: str) -> List[str]:
    with open(path, 'r') as f:
        data = json.load(f)
    addrs: List[str] = []
    # Explicit 'solana' list
    for a in data.get('solana', []):
        if isinstance(a, str):
            addrs.append(a)
    # Flattened addresses: include plausible base58 (no 0x prefix)
    for a in data.get('addresses', []):
        if isinstance(a, str) and not a.startswith('0x'):
            addrs.append(a)
    # Deduplicate
    uniq = []
    seen = set()
    for a in addrs:
        if a not in seen:
            uniq.append(a)
            seen.add(a)
    return uniq


def main():
    ap = argparse.ArgumentParser(description='Solana IOC Monitor')
    ap.add_argument('--rpc', help='Solana RPC URL (default: env SOLANA_RPC_URL or mainnet-beta)', default=None)
    ap.add_argument('--iocs', help='Path to IOC JSON file', required=True)
    ap.add_argument('--interval', type=int, default=20, help='Polling interval seconds')
    args = ap.parse_args()

    rpc_url = args.rpc or os.getenv('SOLANA_RPC_URL') or 'https://api.mainnet-beta.solana.com'
    ioc_addrs = load_iocs(args.iocs)
    if not ioc_addrs:
        logger.warning('No Solana addresses found in IOC file')
    logger.info(f"Loaded {len(ioc_addrs)} Solana IOCs")

    # Track last seen signature per address
    last_sig: Dict[str, str] = {}

    logger.info('Starting Solana IOC polling...')
    while True:
        try:
            for addr in ioc_addrs:
                try:
                    # Fetch recent signatures for address
                    res = rpc_call(rpc_url, 'getSignaturesForAddress', [addr, {"limit": 25}])
                    if not isinstance(res, list):
                        continue
                    # Newest first per Solana RPC
                    for entry in res:
                        sig = entry.get('signature')
                        slot = entry.get('slot')
                        err = entry.get('err')
                        if sig is None:
                            continue
                        if last_sig.get(addr) == sig:
                            # Reached already-processed point for this addr
                            break
                        # Emit alert for unseen signature
                        status = 'OK' if err is None else f"ERR:{err}"
                        logger.warning(f"[SOL-IOC] addr={addr} sig={sig} slot={slot} status={status}")
                    # Update last seen to newest if present
                    if res:
                        last_sig[addr] = res[0].get('signature') or last_sig.get(addr)
                except Exception as e:
                    logger.error(f"Error processing address {addr}: {e}")
            time.sleep(args.interval)
        except KeyboardInterrupt:
            logger.info('Monitor stopped by user')
            break
        except Exception as e:
            logger.error(f"Top-level error: {e}")
            time.sleep(5)


if __name__ == '__main__':
    main()


